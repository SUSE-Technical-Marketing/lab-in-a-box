#!/bin/bash
# Part of lab-in-a-box, it will install SUMA 5.0 beta
# Author/s: Raul Mahiques
# License: GPLv3
#
#  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along with this program. If not, see <https://www.gnu.org/licenses/gpl-3.0.html>.


inputFile=${1}

function usage() {
        echo "Usage:
$0 <configuration file>"

}


# Load SUMA related variables.
function load_suma_vars() {
       _section="suma"
       _load_vars
}



# Setup suma
function setup_suma() {
                $ssh_command "transactional-update register -p ${suma_channel:-SUSE-Manager-Server/5.0/x86_64} -r ${suma_key:-aaaaaa} ; reboot"
                sleep 60
                $ssh_command "transactional-update pkg install -y mgradm-bash-completion mgrctl-bash-completion mgradm-zsh-completion mgrctl-zsh-completion; reboot"
                sleep 60
                $ssh_command "podman login --username  ${suma_reg_username:-admin@mydemo.lab} --password ${suma_reg_pwd:-aaaaaaaa} registry.suse.com"
                $ssh_command "mgradm install --admin-password ${suma_adm_pwd:-admin123} --ssl-password ${suma_ssl_pwd:-admin123}  --admin-email ${suma_adm_email:-admin@mydemo.lab} --scc-user ${suma_scc_user:-XYZ} --scc-password ${suma_scc_pwd:-admin123}  podman"
                sleep 120
                $ssh_command "reboot"
                sleep 60
                echo "SUMA should be available in a few minutes, visit https://${_vm_name}/"
                if [[ "${suma_channels}" != "" ]]
                then
                  echo "We will start the process of synching the selected channels, this may take hours"
                  # wait 5 minutes to let SUMA start
                  sleep 300
                  $ssh_command "mgrctl exec -- mgr-sync add channels ${suma_channels}"
                fi
}


if [[ ! ${inputFile} ]]
then
        echo "missing configuration file parameter"
        usage
        exit 1
fi

if [[ ! -f ${inputFile} ]]
then
        echo "configuration file \"${inputFile}\" not found or name incorrect"
        usage
	exit 1
elif ! jq <"${inputFile}" >/dev/null
then
   echo "Cluster definition not in validated JSON format"
   exit 1
fi

# load lab_creation config
if [[ -f /etc/lab_creation.cfg ]]
then
        . /etc/lab_creation.cfg
elif [[ -f lab_creation.cfg ]]
then
        . lab_creation.cfg
else
        echo "ERROR: Configuration file lab_creation.cfg not found in local path or /etc"
        exit 1
fi

if [[ ! -f ${_lib_path} ]]
then
        echo "ERROR: Library \"${_lib_path}\" not found"
        exit 1
else
        # load library
        . ${_lib_path}
fi


# load insecure_app variables
load_suma_vars



load_vm_vars
ssh_command="ssh  -o StrictHostKeyChecking=accept-new -q  root@${_vm_name}"
echo "# Using node: $_vm_name"
setup_suma



